{"version":3,"sources":["context/AuthContext.js","apollo/index.js","routes/LazyComponents.jsx","routes/index.js","App.js","reportWebVitals.js","index.js","plugins/Storage.js"],"names":["AuthContext","createContext","user","httpLink","createHttpLink","uri","process","client","ApolloClient","connectToDevTools","cache","InMemoryCache","link","LoginComponent","lazy","HomeComponent","routes","name","path","exact","component","fallback","className","Routes","Paths","map","item","idx","Location","auth","setAuth","history","useHistory","location","useLocation","token","Storage","get","useEffect","decode","push","pathname","App","useState","data","logout","setUser","Provider","value","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","key","window","localStorage","getItem","set","val","setItem","jwtDecode","reset","clear"],"mappings":"sHAAA,WAEMA,EAAcC,wBAAc,CAC9BC,KAAM,OAGKF,O,0ICJTG,EAAWC,yBAAe,CAC5BC,IAAKC,gDASMC,EANA,IAAIC,eAAa,CAC5BC,mBAAmB,EACnBC,MAAO,IAAIC,gBACXC,KAAMT,I,QCPJU,EAAiBC,gBAAK,kBAAM,8DAC5BC,EAAgBD,gBAAK,kBAAM,8DCUlBE,EAXA,CAAC,CACZC,KAAM,QACNC,KAAM,SACNC,OAAO,EACPC,UDDiB,kBACjB,cAAC,WAAD,CAAUC,SAAU,qBAAKC,UAAU,UAAf,gDAApB,SACI,cAACT,EAAD,QCAL,CACCI,KAAM,OACNC,KAAM,QACNE,UDCgB,kBAChB,cAAC,WAAD,CAAUC,SAAU,qBAAKC,UAAU,UAAf,gDAApB,SACI,cAACP,EAAD,S,0BECFQ,EAAS,kBAAOC,GAAS,IAAIC,KAAI,SAACC,EAAMC,GAAP,OAAe,cAAC,IAAD,CAAiBR,MAAOO,EAAKP,MAAOD,KAAMQ,EAAKR,KAAME,UAAWM,EAAKN,WAAzDO,OAE5DC,EAAW,SAAC,GAAsB,EAApBC,KAAqB,IAAfC,EAAc,EAAdA,QAClBC,EAAUC,cACVC,EAAWC,cACXC,EAAQC,IAAQC,IAAI,SAS1B,OARAC,qBAAU,WACHH,GAGHL,EAAQM,IAAQG,OAAOJ,IACvBJ,EAAQS,KAAK,UAHa,WAAtBP,EAASQ,UAAuBV,EAAQS,KAAK,YAKlD,CAACP,IACG,cAAC,EAAD,KAgCMS,EA7BH,WAEV,MAAyBC,mBAAS,MAAlC,mBAAQd,EAAR,KAAcC,EAAd,KAMMc,EAAO,CACXf,OACAgB,OANa,aAObC,QALc,SAAC5C,GAAD,OAAU4B,EAAQ5B,KAQlC,OACE,cAAC,iBAAD,CAAgBK,OAAQA,EAAxB,SACE,cAACP,EAAA,EAAY+C,SAAb,CAAsBC,MAAOJ,EAA7B,SACE,cAAC,IAAD,UACE,cAACK,EAAA,EAAD,UACE,cAAC,IAAD,UACE,cAAC,EAAD,CAAUpB,KAAMA,EAAMC,QAASA,eCvC9BoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BZ,K,gCCfA,aAEMd,EAAU,CACZC,IAAK,SAAC0B,GACF,OAAIC,OAAOC,aACAD,OAAOC,aAAaC,QAApB,UAA+B5D,gBAA/B,YAAgEyD,IAEpE,MAEXI,IAAK,SAACJ,EAAKK,GACHJ,OAAOC,cACPD,OAAOC,aAAaI,QAApB,UAA+B/D,gBAA/B,YAAgEyD,GAAOK,IAG/E7B,OAAQ,SAACJ,GAAD,OAAWmC,YAAUnC,IAC7BoC,MAAO,WACHP,OAAOC,aAAaO,UAIbpC,Q","file":"static/js/main.149c1e91.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst AuthContext = createContext({\n    user: null\n});\n\nexport default AuthContext;","import { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\n\nconst httpLink = createHttpLink({\n    uri: process.env.REACT_APP_APOLLO_SERVER\n});\n\nconst client = new ApolloClient({\n    connectToDevTools: true,\n    cache: new InMemoryCache(),\n    link: httpLink\n});\n\nexport default client;","import { lazy, Suspense } from 'react';\n\nconst LoginComponent = lazy(() => import('../components/Login/Login'));\nconst HomeComponent = lazy(() => import('../components/Home'));\n\nexport const Login = () => (\n    <Suspense fallback={<div className=\"waiting\">Cargando o espere unos segundos...</div>}>\n        <LoginComponent/>\n    </Suspense>\n);\n\nexport const Home = () => (\n    <Suspense fallback={<div className=\"waiting\">Cargando o espere unos segundos...</div>}>\n        <HomeComponent/>\n    </Suspense>\n);","import { Login, Home } from './LazyComponents';\n\nconst routes = [{\n    name: \"Login\",\n    path: \"/login\",\n    exact: true,\n    component: Login\n}, {\n    name: \"Home\",\n    path: \"/home\",\n    component: Home\n}];\n\nexport default routes;","import {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { useEffect, useState, useMemo } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport client from './apollo';\nimport Paths from './routes';\nimport Storage from \"./plugins/Storage\";\nimport AuthContext from \"./context/AuthContext\";\nimport { Container } from 'semantic-ui-react';\n\nconst Routes = () => (Paths || []).map((item, idx) => <Route key={idx} exact={item.exact} path={item.path} component={item.component} />);\n\nconst Location = ({ auth, setAuth }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const token = Storage.get('token');\n  useEffect(() => {\n    if (!token) {\n      if (location.pathname !== '/login') history.push('/login');\n    } else {\n      setAuth(Storage.decode(token));\n      history.push('/home');\n    }\n  }, [location]);\n  return <Routes/>;\n}\n\nconst App = () => {\n\n  const [ auth, setAuth] = useState(null);\n\n  const logout = ()  => {};\n\n  const setUser = (user) => setAuth(user);\n\n  const data = {\n    auth,\n    logout,\n    setUser\n  };\n\n  return (\n    <ApolloProvider client={client}>\n      <AuthContext.Provider value={data}>\n        <Router>\n          <Container>\n            <Switch>\n              <Location auth={auth} setAuth={setAuth}/>\n            </Switch>\n          </Container>\n        </Router>\n      </AuthContext.Provider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import jwtDecode from 'jwt-decode';\n\nconst Storage = {\n    get: (key) => {\n        if (window.localStorage) {\n            return window.localStorage.getItem(`${process.env.REACT_APP_APPNAME}_${key}`);\n        }\n        return null;\n    },\n    set: (key, val) => {\n        if (window.localStorage) {\n            window.localStorage.setItem(`${process.env.REACT_APP_APPNAME}_${key}`, val);\n        }\n    },\n    decode: (token) => jwtDecode(token),\n    reset: () => {\n        window.localStorage.clear();\n    }\n};\n\nexport default Storage;\n\n"],"sourceRoot":""}