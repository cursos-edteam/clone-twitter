{"version":3,"sources":["hooks/useAuth.js","gql/user.js","assets/img/bgLogin.jpg","hooks/useForm.jsx","components/Login/Login.jsx"],"names":["useContext","AuthContext","NEW_USER","gql","AUTHENTICATION","UPDATE_AVATAR","useForm","keys","useState","values","Object","reduce","container","item","touched","errors","initialKeys","form","setForm","handleErrors","some","key","handleReset","handleTouched","name","target","handleChange","value","length","Login","history","useHistory","setUser","useAuth","useMutation","addUser","logeandome","open","setOpen","status","header","message","setMessage","email","password","formLogin","username","formLoginRegister","closeModal","ShowMessage","Container","textAlign","Message","compact","success","content","error","handleClickLogin","e","a","preventDefault","variables","input","response","token","data","authentication","Storage","set","push","handleClickRegister","console","log","Grid","columns","className","Row","Column","Image","src","BgLogin","verticalAlign","Form","onSubmit","Field","required","Input","label","placeholder","onBlur","onChange","pointing","type","Button","primary","floated","secondary","onClick","Modal","closeOnEscape","closeOnDimmerClick","size","Header","Content","fluid","Actions"],"mappings":"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","file":"static/js/6.abff5fdf.chunk.js","sourcesContent":["import { useContext } from 'react';\nimport AuthContext from '../context/AuthContext';\n\nexport default () => useContext(AuthContext);","import { gql } from \"@apollo/client\";\n\nexport const NEW_USER = gql`\n    mutation addUser($input: UserInput) {\n        newUser(input: $input) {\n            password\n            username\n        }\n    }\n`;\n\nexport const AUTHENTICATION = gql`\n   mutation logeandome ($input: LoginInput){\n        authentication (input: $input) {\n            token\n        }\n    }\n`;\n\nexport const UPDATE_AVATAR = gql`\n   mutation updateAvatar ($input: AvatarInput) {\n        updateAvatar (input: $input) {\n            id\n        }\n    }\n`;","export default __webpack_public_path__ + \"static/media/bgLogin.1e4e73ee.jpg\";","import { useState } from \"react\";\n\nconst useForm = keys => {\n    const [form, setForm] = useState({\n        values: Object.keys(keys).reduce((container, item) => {\n            container[item] = '';\n            return container;\n        }, {}),\n        touched: Object.keys(keys).reduce((container, item) => {\n            container[item] = false;\n            return container;\n        }, {}),\n        errors: Object.keys(keys).reduce((container, item) => {\n            container[item] = true;\n            return container;\n        }, {}),\n        initialKeys: Object.keys(keys).reduce((container, item) => {\n            container[item] = '';\n            return container;\n        }, {})\n    });\n\n    return [{\n        values: form.values,\n        errors: form.errors,\n        touched: form.touched,\n        handleErrors: Object.keys(form.initialKeys).some(key => form.errors[key]),\n        handleReset: () => {\n            setForm(form => ({\n              ...form,\n              values: form.initialKeys,\n              errors: Object.keys(form.initialKeys).reduce((container, key) => {\n                container[key] = true;\n                return container;\n              }, {}),\n              touched: Object.keys(form.initialKeys).reduce((container, key) => {\n                container[key] = false;\n                return container;\n              }, {})\n            }));\n        },\n        handleTouched: ({ target: { name }}) => {\n            setForm(form => ({\n              ...form,\n              touched: {\n                ...form.touched,\n                [name]: true\n              }\n            }));\n        },\n        handleChange: ({ target: { name, value } }) => {\n            setForm(form => ({\n              ...form,\n              values: {\n                ...form.values,\n                [name]: value\n              },\n              errors: {\n                ...form.errors,\n                [name]: (value || '').length === 0\n              },\n              touched: {\n                ...form.touched,\n                [name]: true\n              }\n            }));\n        }\n    }];\n};\n\nexport default useForm;","import { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { useHistory } from \"react-router-dom\";\nimport { Grid, Image, Form, Button, Modal, Message, Container } from \"semantic-ui-react\";\nimport BgLogin from '../../assets/img/bgLogin.jpg';\nimport useForm from \"././../../hooks/useForm\";\nimport { NEW_USER, AUTHENTICATION } from \"../../gql/user\";\nimport Storage from '../../plugins/Storage';\nimport useAuth from \"../../hooks/useAuth\";\nimport \"./Login.scss\";\nconst Login = () => {\n    const history = useHistory();\n    const { setUser } = useAuth();\n    const [addUser] = useMutation(NEW_USER);\n    const [logeandome] = useMutation(AUTHENTICATION);\n    const [open, setOpen ] = useState(false);\n    const [message, setMessage ] = useState({\n        status: null,\n        header: null,\n        message: null \n    });\n    const [formLogin] = useForm({\n        email: '',\n        password: ''\n    });\n    const [formLoginRegister] = useForm({\n        name: '',\n        username: '',\n        email: '',\n        password: ''\n    });\n\n    const closeModal = () => setOpen(!open);\n\n    const ShowMessage = () => {\n        return message.status === 'SUCCESS' ? (\n        <Container textAlign=\"center\">\n          <Message\n            compact\n            success\n            header={ message.header }\n            content={ message.message}\n          />\n        </Container>) : message.status === 'ERROR' ? (\n        <Container textAlign=\"center\">\n          <Message\n            compact\n            error\n            header={ message.header }\n            content={ message.message }\n          />\n        </Container>) : null\n    }\n\n    const handleClickLogin = async (e) => {\n        e.preventDefault();\n        if(formLogin.handleErrors) {\n            setMessage({\n                status: 'ERROR',\n                header: 'Faltan campos por llenar',\n                message: 'El campo email o contraseña se encuentra vacios' \n            });\n        } else {\n            try {\n                const response = await logeandome({\n                    variables: {\n                        input: formLogin.values\n                    }\n                });\n\n                const { data: { authentication: { token } } } = response;\n\n                Storage.set('token', token);\n                setUser(token);\n                history.push('/home');\n\n                setMessage({\n                    status: 'SUCCESS',\n                    header: 'Datos llenados exitosamente',\n                    message: 'Espere unos segundos por favor...' \n                });\n\n            } catch (error) {\n                setMessage({\n                    status: 'ERROR',\n                    header: 'Ocurrio un error',\n                    message: error.message \n                });\n            }\n        }\n    }\n\n\n    const handleClickRegister = async (e) => {\n        e.preventDefault();\n        if(formLoginRegister.handleErrors) {\n            setMessage({\n                status: 'ERROR',\n                header: 'Faltan campos por llenar',\n                message: 'El campo email o contraseña se encuentra vacios' \n            });\n        } else {\n            try {\n                const response = await addUser({\n                    variables: {\n                        input: formLoginRegister.values\n                    }\n                });\n                closeModal();\n                formLoginRegister.handleReset();\n                setMessage({\n                    status: 'SUCCESS',\n                    header: 'Datos llenados exitosamente',\n                    message: 'Espere unos segundos por favor...' \n                });\n                console.log(\"todo bien\");\n            } catch (error) {\n                setMessage({\n                    status: 'ERROR',\n                    header: 'Ocurrio un error',\n                    message: error.message \n                });\n            }\n        }\n    }\n\n    return (\n        <>\n        <Grid columns={2} className=\"login\">\n            <Grid.Row>\n                <Grid.Column>\n                    <Image src={BgLogin} className=\"img\"></Image>\n                </Grid.Column>\n                <Grid.Column verticalAlign=\"middle\">\n                    <ShowMessage/>\n                    <Form onSubmit={handleClickLogin}>\n                        <Form.Field required>\n                            <Form.Input\n                                label=\"Email\"\n                                className=\"\"\n                                name=\"email\"\n                                placeholder=\"Email\"\n                                onBlur={formLogin.handleTouched}\n                                onChange={formLogin.handleChange}\n                                value={formLogin.values.email}\n                                error={\n                                    formLogin.touched.email && \n                                    formLogin.errors.email ? \n                                    { content: 'Tu correo esta mal escrito', pointing: 'below'}\n                                    : null\n                                }\n                            ></Form.Input>\n                        </Form.Field>\n                        <Form.Field required>\n                            <Form.Input\n                                label=\"Contraseña\"\n                                name=\"password\"\n                                placeholder=\"Contraseña\"\n                                type=\"password\"\n                                onBlur={formLogin.handleTouched}\n                                onChange={formLogin.handleChange}\n                                value={formLogin.values.password}\n                                error={\n                                    formLogin.touched.password && \n                                    formLogin.errors.password ? \n                                    { content: 'La contraseña es requerida', pointing: 'below'} \n                                    : null }\n                            ></Form.Input>\n                        </Form.Field>\n                        <Button primary floated=\"left\">Ingresar</Button>\n                        <Button secondary floated=\"right\" onClick={() => closeModal()}>Registrarme</Button>\n                    </Form>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n        {/* Creando el Modal para registro */}\n      <Modal\n        closeOnEscape={true}\n        closeOnDimmerClick={true}\n        open={open}\n        size=\"mini\"\n        >\n        <Modal.Header>Registrar un nuevo usuario</Modal.Header>\n            <Modal.Content>\n                <ShowMessage/>\n                <Form onSubmit={handleClickRegister}>\n                    <Form.Field required>\n                        <Form.Input\n                            label=\"Nombres\"\n                            placeholder=\"Nombres\"\n                            name=\"name\"\n                            fluid\n                            onBlur={formLoginRegister.handleTouched}\n                            onChange={formLoginRegister.handleChange}\n                            value={formLoginRegister.values.name}\n                            error={\n                                formLoginRegister.touched.name &&\n                                formLoginRegister.errors.name ? \n                                { content: 'Tu nombre no es valido', pointing: 'below'}\n                                : null\n                            }\n                            ></Form.Input>\n                    </Form.Field>\n                    <Form.Field required>\n                        <Form.Input\n                        label=\"Username\"\n                        placeholder=\"Nombre de usuario\"\n                        name=\"username\"\n                        fluid\n                        onBlur={formLoginRegister.handleTouched}\n                        onChange={formLoginRegister.handleChange}\n                        value={formLoginRegister.values.username}\n                        error={\n                            formLoginRegister.touched.username &&\n                            formLoginRegister.errors.username ? \n                            { content: 'Tu nombre de usuario no es valido', pointing: 'below'}\n                            : null\n                        }\n                        ></Form.Input>\n                    </Form.Field>\n                    <Form.Field required>\n                        <Form.Input\n                        label=\"Email\"\n                        placeholder=\"Email\"\n                        name=\"email\"\n                        fluid\n                        onBlur={formLoginRegister.handleTouched}\n                        onChange={formLoginRegister.handleChange}\n                        value={formLoginRegister.values.email}\n                        error={\n                            formLoginRegister.touched.email &&\n                            formLoginRegister.errors.email ? \n                            { content: 'Tu email no es valido', pointing: 'below'}\n                            : null\n                        }\n                        ></Form.Input>\n                    </Form.Field>\n                    <Form.Field required>\n                        <Form.Input\n                        label=\"Contrasena\"\n                        placeholder=\"Contrasena\"\n                        name=\"password\"\n                        type=\"password\"\n                        fluid\n                        onBlur={formLoginRegister.handleTouched}\n                        onChange={formLoginRegister.handleChange}\n                        value={formLoginRegister.values.password}\n                        error={\n                            formLoginRegister.touched.password &&\n                            formLoginRegister.errors.password ? \n                            { content: 'Tu cotraseña no es valido', pointing: 'below'}\n                            : null\n                        }\n                        ></Form.Input>\n                    </Form.Field>\n                    <Modal.Actions>\n                        <Button secondary onClick={() => closeModal()}>Cancelar</Button>\n                        <Button primary type=\"submit\">Registrar usuario</Button>\n                    </Modal.Actions>\n                </Form>\n            </Modal.Content>\n        </Modal>\n        </>\n    )\n}\n\nexport default Login;"],"sourceRoot":""}